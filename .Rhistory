source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
install.packages("ppcor")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("ModelGeneration.R")
source("ModelGeneration.R")
source('CorrelateCreate.R')
source('CorrelateCreate.R')
source('CorrelateCreate.R')
source('CorrelateCreate.R')
source('CorrelateCreate.R')
source('CorrelateCreate.R')
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source('CorrelateCreate.R')
source("GenerateNetworkGraph.R")
source("ModelGeneration.R")
print("cor_matrix")
print(cor_matrix)
print(cor_matrix)
source("GenerateCorrelationMatrix.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateCorrelationMatrix.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateCorrelationMatrix.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
library(igraph)
library(igraph)
source("throwaway.R")
source("throwaway.R")
install.packages("igraph")
library(igraph)
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("GenerateCorrelationMatrix.R")
source("throwaway.R")
source("Setup.R")
source("GenerateCorrelationMatrix.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("GenerateCorrelationMatrix.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("Setup.R")
source("throwaway.R")
source("throwaway.R")
source("Setup.R")
source("throwaway.R")
source("throwaway.R")
library(igraph)
source("throwaway.R")
load("~/Desktop/NASCOTUS_Research/.RData")
# Assuming your data frame is called 'composite_dataset' with predictor and outcome variables
predictor_vars <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcome_vars <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix
cor_matrix <- cor(cbind(predictor_vars, outcome_vars), use = "complete.obs")
# Extract correlations between predictors and outcomes
predictor_outcome_correlations <- cor_matrix[1:ncol(predictor_vars), (ncol(predictor_vars) + 1):ncol(cor_matrix)]
# Create a graph object
graph <- igraph::graph_from_adjacency_matrix(predictor_outcome_correlations, mode = "undirected", weighted = TRUE)
# Plot the graph using ggraph for better control over node placement
library(ggraph)
ggraph(graph) +
geom_edge_link(aes(edge_alpha = weight), edge_colour = "grey") +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Correlation Predictors and OutcomesG")
# Assuming your data frame is called 'composite_dataset' with predictor and outcome variables
predictor_vars <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcome_vars <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix
cor_matrix <- cor(cbind(predictor_vars, outcome_vars), use = "complete.obs")
# Extract correlations between predictors and outcomes
predictor_outcome_correlations <- cor_matrix[1:ncol(predictor_vars), (ncol(predictor_vars) + 1):ncol(cor_matrix)]
# Create a graph object
graph <- igraph::graph_from_adjacency_matrix(predictor_outcome_correlations, mode = "undirected", weighted = TRUE)
# Use the Louvain community detection algorithm to cluster the graph
clusters <- igraph::cluster_louvain(graph)
# Set node colors and shapes based on the detected communities
node_colors <- c("pink", "orange")[clusters$membership]
node_shapes <- rep(c("circle", "square"), c(ncol(predictor_vars), ncol(outcome_vars)))
# Plot the graph using ggraph for better control over node placement
library(ggraph)
ggraph(graph) +
geom_edge_link(aes(edge_alpha = weight), edge_colour = "grey") +
geom_node_point(aes(colour = factor(node_colors), shape = factor(node_shapes)), size = 5) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Correlation Predictors and OutcomesG")
# Assuming your data frame is called 'composite_dataset' with predictor and outcome variables
predictor_vars <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcome_vars <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix
cor_matrix <- cor(cbind(predictor_vars, outcome_vars), use = "complete.obs")
# Extract correlations between predictors and outcomes
predictor_outcome_correlations <- cor_matrix[1:ncol(predictor_vars), (ncol(predictor_vars) + 1):ncol(cor_matrix)]
# Create a graph object
graph <- igraph::graph_from_adjacency_matrix(predictor_outcome_correlations, mode = "undirected", weighted = TRUE)
# Use the Louvain community detection algorithm to cluster the graph
clusters <- igraph::cluster_louvain(graph)
# Set node colors and shapes based on the detected communities
node_colors <- c("pink", "orange")[clusters$membership]
node_shapes <- rep(c("circle", "square"), c(ncol(predictor_vars), ncol(outcome_vars)))
# Plot the graph using ggraph for better control over node placement
library(ggraph)
ggraph(graph) +
geom_edge_link(aes(edge_alpha = weight), edge_colour = "grey") +
geom_node_point(aes(colour = factor(node_colors), shape = factor(node_shapes)), size = 5) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Correlation Predictors and OutcomesG")
source("throwaway.R")
# Assuming your data frame is called 'composite_dataset' with predictor and outcome variables
predictor_vars <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcome_vars <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix
cor_matrix <- cor(cbind(predictor_vars, outcome_vars), use = "complete.obs")
# Extract correlations between predictors and outcomes
predictor_outcome_correlations <- cor_matrix[1:ncol(predictor_vars), (ncol(predictor_vars) + 1):ncol(cor_matrix)]
# Create a graph object
graph <- igraph::graph_from_adjacency_matrix(predictor_outcome_correlations, mode = "undirected", weighted = TRUE)
# Assign group labels to nodes (1 for predictors, 2 for outcomes)
group_labels <- c(rep(1, ncol(predictor_vars)), rep(2, ncol(outcome_vars)))
# Set node colors and shapes based on the group labels
node_colors <- c("pink", "orange")[group_labels]
node_shapes <- rep(c("circle", "square"), c(ncol(predictor_vars), ncol(outcome_vars)))
# Manually set the layout positions for each group
layout_positions <- igraph::layout_with_kk(graph)
# Plot the graph with two clusters for predictors and outcomes
library(ggraph)
ggraph(graph, layout = layout_positions) +
geom_edge_link(aes(edge_alpha = weight), edge_colour = "grey") +
geom_node_point(aes(colour = factor(node_colors), shape = factor(node_shapes)), size = 5) +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Correlation Predictors and OutcomesG")
source("throwaway.R")
source("throwaway.R")
# Assuming your data frame is called 'composite_dataset' with predictor and outcome variables
predictor_vars <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcome_vars <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix
cor_matrix <- cor(cbind(predictor_vars, outcome_vars), use = "complete.obs")
# Extract correlations between predictors and outcomes
predictor_outcome_correlations <- cor_matrix[1:ncol(predictor_vars), (ncol(predictor_vars) + 1):ncol(cor_matrix)]
# Create a graph object
graph <- igraph::graph_from_adjacency_matrix(predictor_outcome_correlations, mode = "undirected", weighted = TRUE)
# Assign group labels to nodes (1 for predictors, 2 for outcomes)
group_labels <- c(rep(1, ncol(predictor_vars)), rep(2, ncol(outcome_vars)))
# Set node colors and shapes based on the group labels
node_colors <- c("pink", "orange")[group_labels]
node_shapes <- rep(c("circle", "square"), c(ncol(predictor_vars), ncol(outcome_vars)))
# Manually set the layout positions for each group using layout_with_kk
layout_positions <- igraph::layout_with_kk(graph)
# Adjust positions for predictors and outcomes
layout_positions[, group_labels == 1] <- layout_positions[, group_labels == 1] + 5  # Adjust x positions for predictors
source("throwaway.R")
source("throwaway.R")
source("Setup.R")
install.packages("igraph")
source("GenerateCorrelationMatrix.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway.R")
source("throwaway2.R")
source("throwaway2.R")
source("GenerateCorrelationMatrix.R")
source("throwaway2.R")
View(composite_dataset)
source("Setup.R")
source("Setup.R")
source("throwaway2.R")
print(cor_matrix
print(cor_matrix)
source("GenerateCorrelationMatrix.R")
source("throwaway2.R")
source("throwaway2.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
install.packages("qgraph")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("Setup.R")
install.packages("psych")
source("GenerateCorrelationsMatrix.R")
source("GenerateCorrelationMatrix.R")
source("GenerateNetworkGraph.R")
library(ppcor)
install.packages("ppcor")
install.packages("ppcor")
source("PCor.R")
source("PCor.R")
source("PCor.R")
install.packages("qgraph")
source("PCor.R")
source("PCor.R")
install.packages("qgraph")
install.packages("qgraph")
source("PCor.R")
source("PCor.R")
source("PCor.R")
install.packages("qgraph")
source("PCor.R")
source("PCor.R")
install.packages("qgraph")
source("PCor.R")
# Install and load the required libraries
install.packages("qgraph")
library(qgraph)
# Assuming you have a dataset called composite_dataset
# Make sure it has columns: caseSource, petitioner, respondent, partyWinning, decisionDirection, issueArea
# Extract the predictors and outcomes
predictors <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcomes <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix for predictors and outcomes with handling missing values
cor_predictors <- cor(predictors, use = "pairwise.complete.obs")
cor_outcomes <- cor(outcomes, use = "pairwise.complete.obs")
# Create a graph for relationships between predictors and outcomes
qgraph(graph = cor_predictors, layout = "spring", weighted = TRUE, labels = colnames(cor_predictors), groups = rep(1, ncol(predictors))) # '1' is the group for predictors
# Install and load the required libraries
install.packages("qgraph")
library(qgraph)
# Assuming you have a dataset called composite_dataset
# Make sure it has columns: caseSource, petitioner, respondent, partyWinning, decisionDirection, issueArea
# Extract the predictors and outcomes
predictors <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcomes <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix for predictors and outcomes with handling missing values
cor_predictors <- cor(predictors, use = "pairwise.complete.obs")
cor_outcomes <- cor(outcomes, use = "pairwise.complete.obs")
# Create a graph for relationships between predictors and outcomes
qgraph(graph = cor_predictors, layout = "spring", weighted = TRUE, labels = colnames(cor_predictors), groups = rep(1, ncol(predictors))) # '1' is the group for predictors
# Install and load the required libraries
install.packages("qgraph")
library(qgraph)
# Assuming you have a dataset called composite_dataset
# Make sure it has columns: caseSource, petitioner, respondent, partyWinning, decisionDirection, issueArea
# Extract the predictors and outcomes
predictors <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcomes <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix for predictors and outcomes with handling missing values
cor_predictors <- cor(predictors, use = "pairwise.complete.obs")
cor_outcomes <- cor(outcomes, use = "pairwise.complete.obs")
# Create a graph for relationships between predictors and outcomes
qgraph(graph = cor_predictors, layout = "spring", weighted = TRUE, labels = colnames(cor_predictors), groups = rep(1, ncol(predictors))) # '1' is the group for predictors
source("PCor.R")
library(qgraph)
# Assuming you have a dataset called composite_dataset
# Make sure it has columns: caseSource, petitioner, respondent, partyWinning, decisionDirection, issueArea
# Extract the predictors and outcomes
predictors <- composite_dataset[, c("caseSource", "petitioner", "respondent")]
outcomes <- composite_dataset[, c("partyWinning", "decisionDirection", "issueArea")]
# Calculate the correlation matrix for predictors and outcomes with handling missing values
cor_predictors_outcomes <- cor(cbind(predictors, outcomes), use = "pairwise.complete.obs")
# Create a graph with weighted edges and full column names as labels
qgraph(cor_predictors_outcomes, layout =
source("PCor.R")
source("PCor.R")
source("PCor.R")
install.packages("qgraph")
source("PCor.R")
source("PCor.R")
source("PCor.R")
source("GenerateCorrelationMatrix.R")
source("GenerateNetworkGraph.R")
source("GenerateNetworkGraph.R")
source("DirectedGraph.R")
source("GenerateNetworkGraph.R")
source("PCor.R")
install.packages("qgraph")
source("GenerateNetworkGraph.R")
source("ModelGeneration.R")
source("ModelGeneration.R")
library(ppcor)
source("Pcoring.R")
source("Pcoring.R")
View(x)
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("ModelGeneration.R")
source("DirectedGraph.R")
source("Setup.R")
source("GenerateCorrelationMatrix.R")
source("Pcoring.R")
source("DirectedGraph.R")
source("QGraphGenerate.R")
source("QGraphGenerate.R")
source("QGraphGenerate.R")
source("QGraphGenerate.R")
source("Setup.R")
source("GenerateCorrelationMatrix.R")
source("ModelGeneration.R")
source("ModelGeneration.R")
source("DirectedGraph.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Conservative_Generate.R")
source("Liberal_Generate.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("Pcoring.R")
source("throwout.R")
source("throwout.R")
source("Pcoring.R")
source("Pcoring.R")
source("Setup.R")
install.packages("smacof")
install.packages("networktools")
source("Partisan_Heatmaps.R")
source("Setup.R")
install.packages("dplyr")
source("Partisan_Heatmaps.R")
source("Partisan_Heatmaps.R")
source("Partisan_Heatmaps.R")
source("Partisan_Heatmaps.R")
source("Setup.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
View(cor_matrix2)
View(cor_matrix)
sourc("QgraphGenerate.R")
source("QgraphGenerate.R")
print(cor_matrix)
print(cor_matrix)
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
print(cor_matrix)
source("QgraphGenerate.R")
print(cor_matrix)
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("QgraphGenerate.R")
source("Setup.R")
source("Partisan_Heatmaps.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("Partisan_Heatmaps.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
library(viridis)
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("Partisan_Heatmaps.R")
source("throwout2.R")
source("throwout2.R")
source("throwout2.R")
source("Partisan_Heatmaps.R")
source("throwout2.R")
source("Perceptually_Uniform_Heatmap.R")
source("Perceptually_Uniform_Heatmap.R")
source("GenerateCorrelationMatrix.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("PartisanCorrelationMatrices.R")
source("Setup.R")
source("Perceptually_Uniform_Heatmap.R")
source("PartisanCorrelationMatrices.R")
source("Setup.R")
source("Perceptually_Uniform_Heatmap.R")
source("throwout.R")
source("Setup.R")
install.packages("dplyr")
install.packages("dplyr")
source("throwout.R")
source("Perceptually_Uniform_Heatmap.R")
source("Perceptually_Uniform_Heatmap.R")
source("Perceptually_Uniform_Heatmap.R")
source("Perceptually_Uniform_Heatmap.R")
source("Perceptually_Uniform_Heatmap.R")
source("Perceptually_Uniform_Heatmap.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("throwout.R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
source("reordering .R")
View(affiliations_dataset)
source("Setup.R")
source("Conservative_Generate.R")
source("DirectedGraph.R")
source("DirectedGraph.R")
source("GenerateCorrelationMatrix.R")
source("GenerateCorrelationMatrix.R")
source("GenerateCorrelationMatrix.R")
source("DirectedGraph.R")
source("General_Pcor.R")
source("Liberal_Generate.R")
